//
// Created by Abd-ElRahman on 03/12/2024.
//

#ifndef NUMERICAL_TIC_TAC_TOE_H
#define NUMERICAL_TIC_TAC_TOE_H
#include"BoardGame_Classes.h"
#include <bits/stdc++.h>

using namespace std;

template<typename T>
class numericalttt_board:public Board<T>{
public:
    numericalttt_board();
        bool update_board (int x , int y , T symbol);
        void display_board () ;
        bool is_win() ;
        bool is_draw();
        bool game_is_over();

};


template<typename T>
class numericalttt_player:public Player<T>{
public:
    numericalttt_player(string name , T symbol);
     void getmove(int& x, int& y) = 0;
   // T getsymbol();

};


template<typename T>
class numericalttt_random_player:public RandomPlayer<T>{
public:
    numericalttt_random_player(T symbol);
    void getmove(int &x, int &y) ;
};





///----------------Implementation


// Constructor for X_O_Board
template <typename T>
numericalttt_board<T>::numericalttt_board()  {
    this->rows = this->columns = 3;
    this->board = new char*[this->rows];
    for (int i = 0; i < this->rows; i++) {
        this->board[i] = new char[this->columns];
        for (int j = 0; j < this->columns; j++) {
            this->board[i][j] = 0;
        }
    }
    this->n_moves = 0;
}


template <typename T>
bool numericalttt_board<T>::update_board(int x, int y, T mark) {
    // Only update if move is valid
    if (!(x < 0 || x >= this->rows || y < 0 || y >= this->columns) && (this->board[x][y] == 0|| mark <1 || mark>9)) {
        if (mark <1 || mark>9){
            this->n_moves--;
            this->board[x][y] = 0;
        }
        else {
            this->n_moves++;
            this->board[x][y] = mark;
        }

        return true;
    }
    return false;
}

// Display the board and the pieces on it
template <typename T>
void numericalttt_board<T>::display_board() {
    for (int i = 0; i < this->rows; i++) {
        cout << "\n| ";
        for (int j = 0; j < this->columns; j++) {
            cout << "(" << i << "," << j << ")";
            cout << setw(2) << this->board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}

//check for wining
template<typename T>
bool numericalttt_board<T>::is_win() {
    //check for rows and columns
    for (int i = 0; i < this->rows; ++i) {
        if((this->board[i][0]+this->board[i][1]+this->board[i][2]==15)||(this->board[0][i]+this->board[1][i]+this->board[2][i]==15))
            return true;


    }

    if((this->board[0][0]+this->board[1][1]+this->board[2][2]==15)||(this->board[0][2]+this->board[1][1]+this->board[2][0]==15)){
        return true;
    }
    return false;
}

template <typename T>
bool numericalttt_board<T>::is_draw() {
    return (this->n_moves == 9 && !is_win());
}


template <typename T>
bool numericalttt_board<T>::game_is_over() {
    return (is_win()||is_draw());
}
//players
template <typename T>
numericalttt_player<T>::numericalttt_player (string name, T symbol) : Player<T>(name, symbol) {}

template <typename T>
void numericalttt_player<T>::getmove(int& x, int& y) {
    cout << "\nPlease enter your move x and y (0 to 2) separated by spaces: ";
    cin >> x >> y;
}

//random
template<typename T>
numericalttt_random_player<T>::numericalttt_random_player(T symbol):RandomPlayer<T>( symbol) {    this->dimension = 3;
    this->name = "Random Computer Player";
    srand(static_cast<unsigned int>(time(0)));  // Seed the random number generator
}

template <typename T>
void numericalttt_random_player<T>::getmove(int& x, int& y) {
    x = rand() % this->dimension;  // Random number between 0 and 2
    y = rand() % this->dimension;

}





#endif //NUMERICAL_TIC_TAC_TOE_H




#include <bits/stdc++.h>
#include "connect_four.h"
#include "numerical_tic_tac_toe.h"
using namespace std;

int main() {
    // Create a ConnectFourBoard object
   /* int choice;
    Player<char>* players[2];  // Array to store the two players
    ConnectFourBoard<char>* board = new ConnectFourBoard<char>();  // Create a new board
    string playerXName, player2Name;

    // Set up Player 1 (X)
    cout << "Enter Player X name: ";
    cin >> playerXName;

    cout << "Choose Player X type:\n";
    cout << "1. Human\n";
    cout << "2. Random Computer\n";
    cin >> choice;

    // Create Player 1 based on the choice
    switch(choice) {
        case 1:
            players[0] = new ConnectFourPlayer<char>(playerXName, 'X');
            break;
        case 2:
           players[0] = new ConnectFourRandomPlayer<char>('X');
            break;
        default:
            cout << "Invalid choice for Player 1. Exiting the game.\n";
            return 1;  // Exit if invalid input
    }

    // Set up Player 2 (O)
    cout << "Enter Player 2 name: ";
    cin >> player2Name;

    cout << "Choose Player 2 type:\n";
    cout << "1. Human\n";
    cout << "2. Random Computer\n";
    cin >> choice;

    // Create Player 2 based on the choice
    switch(choice) {
        case 1:
            players[1] = new ConnectFourPlayer<char>(player2Name, 'O');  // Human player for Player O
            break;
        case 2:
            players[1] = new ConnectFourRandomPlayer<char>('O');  // Random computer player for Player O
            break;
        default:
            cout << "Invalid choice for Player 2. Exiting the game.\n";
            return 1;  // Exit if invalid input
    }

    // Create the game manager and run the game
    GameManager<char> connectFourGame(board, players);
    connectFourGame.run();  // Run the game

    // Clean up dynamically allocated memory
    delete board;
    for (int i = 0; i < 2; ++i) {
        delete players[i];
    }*/

   int choice;
    Player<char>* players[2];
    numericalttt_board<char>* B = new numericalttt_board<char>();
    string playerXName, player2Name;

    cout << "Welcome to FCAI X-O Game. :)\n";

    // Set up player 1
    cout << "Enter Player X name: ";
    cin >> playerXName;
    cout << "Choose Player X type:\n";
    cout << "1. Human\n";
    cout << "2. Random Computer\n";
    cin >> choice;

    switch(choice) {
        case 1:
            cout<<"Enter even number: ";
            int n;cin>>n;
            players[0] = new numericalttt_player<char>(playerXName,n );
            break;
        case 2:
            players[0] = new X_O_Random_Player<char>(n);
            break;
        default:
            cout << "Invalid choice for Player 1. Exiting the game.\n";
            return 1;
    }

    // Set up player 2
    cout << "Enter Player 2 name: ";
    cin >> player2Name;
    cout << "Choose Player 2 type:\n";
    cout << "1. Human\n";
    cout << "2. Random Computer\n";
    cin >> choice;

    switch(choice) {
        case 1:
            cout<<"Enter odd number: "<<endl;
            int n;cin>>n;
            players[1] = new numericalttt_player<int>(player2Name, n);
            break;
        case 2:
            players[1] = new numericalttt_random_player<int>(n);  // Use int consistently

            break;
        default:
            cout << "Invalid choice for Player 2. Exiting the game.\n";
            return 1;
    }

    // Create the game manager and run the game
    GameManager<char> numerical_game(B, players);
    numerical_game.run();

    // Clean up
    delete B;
    for (int i = 0; i < 2; ++i) {
        delete players[i];
    }

    return 0;
}

