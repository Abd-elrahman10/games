//
// Created by Abd-ElRahman on 03/12/2024.
//

#ifndef NUMERICAL_TIC_TAC_TOE_H
#define NUMERICAL_TIC_TAC_TOE_H
#include"BoardGame_Classes.h"
#include <bits/stdc++.h>


vector<int> vodd = {1, 3, 5, 7, 9};
vector<int> veven = {2, 4, 6, 8};


using namespace std;

template<typename T>
class numericalttt_board:public Board<T>{
private:
    vector<int>vec;
public:
        numericalttt_board();
        bool isvalid(int x, int y,T symbol);
        bool update_board (int x , int y , T symbol);
        void display_board () ;
        bool is_win() ;
        bool is_draw();
        bool game_is_over();

};


template<typename T>
class numericalttt_player:public Player<T>{
public:
    numericalttt_player(string name , T symbol);
     void getmove(int& x, int& y) ;

};


template<typename T>
class numericalttt_random_player:public RandomPlayer<T>{
public:
    numericalttt_random_player(T symbol);
    void getmove(int &x, int &y) ;
};




///----------------Implementation






// Constructor for X_O_Board
template <typename T>
numericalttt_board<T>::numericalttt_board()  {
    this->rows = this->columns = 3;
    this->board = new T*[this->rows];
    for (int i = 0; i < this->rows; i++) {
        this->board[i] = new T[this->columns];
        for (int j = 0; j < this->columns; j++) {
            this->board[i][j] = 0;
        }
    }
    this->n_moves = 0;
}

template<typename T>
bool numericalttt_board<T>::isvalid(int x,int y,T symbol) {
        if(this->n_moves%2==0){
            auto it = find(veven.begin(), veven.end(), symbol);
            for (int i = 0; i < veven.size(); ++i) {
                if(it!=veven.end()){
                    veven.erase(it);
                    return true;}
                else{
                    cout<<"Enter avalid number: "<<endl;

                    return false;}
            }
        }
        else{
            auto it = find(vodd.begin(), vodd.end(), symbol);
            for (int i = 0; i < vodd.size(); ++i) {
                if(it!=vodd.end()){
                    vodd.erase(it);
                    return true;}
                else{
                    cout<<"Enter avalid number: "<<endl;
                    return false;}
            }
        }
    }

template <typename T>
bool numericalttt_board<T>::update_board(int x, int y, T mark) {
    // Only update if move is valid
    if(isvalid(x,y,mark)){
    if (!(x < 0 || x >= this->rows || y < 0 || y >= this->columns) && (this->board[x][y] == 0|| mark == 0)) {
        if (mark == 0){
            this->n_moves--;
            this->board[x][y] = 0;
        }
else{this->n_moves++;
    this->board[x][y]=mark;
}



        }
    }
    else
        return false;

    return true;
}

// Display the board and the pieces on it
template <typename T>
void numericalttt_board<T>::display_board() {
    for (int i = 0; i < this->rows; i++) {
        cout << "\n| ";
        for (int j = 0; j < this->columns; j++) {
            cout << "(" << i << "," << j << ")";
            cout << setw(2) << this->board[i][j] << " |";
        }
        cout << "\n-----------------------------";
    }
    cout << endl;
}

//check for wining
template<typename T>
bool numericalttt_board<T>::is_win() {
    //check for rows and columns
    for (int i = 0; i < this->rows; ++i) {
        if((this->board[i][0]+this->board[i][1]+this->board[i][2]==15)||(this->board[0][i]+this->board[1][i]+this->board[2][i]==15))
            return true;


    }

    if((this->board[0][0]+this->board[1][1]+this->board[2][2]==15)||(this->board[0][2]+this->board[1][1]+this->board[2][0]==15)){
        return true;
    }
    return false;
}

template <typename T>
bool numericalttt_board<T>::is_draw() {
    return (this->n_moves == 9 && !is_win());
}


template <typename T>
bool numericalttt_board<T>::game_is_over() {
    return (is_win()||is_draw());
}
//players
template <typename T>
numericalttt_player<T>::numericalttt_player (string name, T symbol) : Player<T>(name, symbol) {

}

template <typename T>
void numericalttt_player<T>::getmove(int& x, int& y) {
    cout << this->getname() <<",please enter your move x and y (0 to 2) separated by spaces: ";
    cin >> x >> y;
    cout<<" Enter number: \n";

int number;cin>>number;
this->symbol=number;


}

//random
template<typename T>
numericalttt_random_player<T>::numericalttt_random_player(T symbol):RandomPlayer<T>( symbol) {    this->dimension = 3;
    this->name = "Random Computer Player";
    srand(static_cast<unsigned int>(time(0)));  // Seed the random number generator
}

template <typename T>
void numericalttt_random_player<T>::getmove(int& x, int& y) {
    x = rand() % this->dimension;  // Random number between 0 and 2
    y = rand() % this->dimension;
    int number=rand()%9+1;
    this->symbol=number;
}





#endif //NUMERICAL_TIC_TAC_TOE_H


    return 0;
}

